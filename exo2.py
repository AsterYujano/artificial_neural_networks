import numpy as np

x1=[ 
[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]];
x2=[ [ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1],[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1] ];
x3=[ [ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1],[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1],[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1],[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1],[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1],[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1],[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1],[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1],[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1],[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1],[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1],[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1],[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1],[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1],[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1],[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1] ];
x4=[ [ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1],[ -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1],[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1],[ -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1] ];
x5=[ [ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1],[ -1, 1, 1, 1, 1, 1, 1, 1, 1, -1],[ -1, 1, 1, 1, 1, 1, 1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1],[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1] ];

#############
# Functions #
#############
def print_number(patern):
	print("______________")
	for x in patern:
		print('| ', end="")
		for i in range(len(x)):
			if x[i] == 1:
				print("X", end="")
			else:
				print(" ", end="")
		print(' | \r')
	print("______________")

def dimensions(patern):
	y = len(patern)
	for line in patern:
		x = len(line)
	return [x,y]

def convert_to_matrix(patern):
	dimension = dimensions(patern)
	matrix = np.zeros((dimension[1],dimension[0]), dtype=int)
	i = 0
	for line in patern:
		for j in range(len(line)):
			matrix[i,j] = line[j]
		i=i+1
	return matrix
	
def convert_to_vector(patern):
	dimension = dimensions(patern)
	vector = np.zeros((dimension[0]*dimension[1]), dtype=int)
	n = 0
	for line in patern:
		for j in range(len(line)):
			vector[n] = line[j]
			n = n+1
	return vector

def create_matrix(patterns_list):
	weight_matrix = np.zeros( ( len( convert_to_vector(patterns_list[0]) ), len(convert_to_vector(patterns_list[0])) ), dtype=int )

	for patern in patterns_list:
		patern = convert_to_vector(patern)
		matrix_weight_of_x = np.zeros((len(patern),len(patern)), dtype=int)

		for i in range(len(patern)):
			for j in range(len(patern)):
				if i==j:
					matrix_weight_of_x[i,j] = 0
				else:
					matrix_weight_of_x[i,j] = patern[i]*patern[j]
		weight_matrix = weight_matrix + matrix_weight_of_x
	return weight_matrix

########
# Main #
########

patterns_list = [x1, x2, x3, x4, x5]
print_number(x1)
print("weight_matrix : \n"+ str(create_matrix(patterns_list)))

feed1 = [[1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1]] 
print(len(convert_to_vector(feed1)))